{"ast":null,"code":"var _jsxFileName = \"/Users/labri/Desktop/coding/project-2/project-2-starter/src/components/pictureOfTheDay/CalendarPage.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\"\nimport Calendar from \"react-calendar\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport CalendarImages from \"./CalendarImages\"; // import 'react-calendar/dist/Calendar.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CalendarPage() {\n  _s();\n\n  const navigate = useNavigate();\n  const [value, setValue] = React.useState(new Date());\n  const [apod, setApod] = React.useState(undefined);\n  let date = new Date();\n  let firstDateOfCurrentMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n  let summerTimeAdjustedFirstDate = new Date(firstDateOfCurrentMonth.getTime() - firstDateOfCurrentMonth.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n  let formattedToday = new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n  const [formattedDate, setDate] = React.useState(summerTimeAdjustedFirstDate);\n  React.useEffect(() => {\n    async function fetchApod() {\n      const resp = await fetch(`https://api.nasa.gov/planetary/apod?start_date=${formattedDate}&thumbs=true&api_key=ZNZOJj0Nq1kjV9IBBHp5qNWaAfThwOh4Kn98vhuY`);\n      const data = await resp.json();\n      setApod(data);\n    }\n\n    fetchApod();\n  }, [formattedDate]);\n\n  function onChange(nextValue) {\n    setValue(nextValue); // this is allowing to navigate the calendar by clicking eg. a day from a different month\n  }\n\n  function onClickDay(value) {\n    // point to the DatePage component\n    const calendarDate = new Date(value.getTime() - value.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    const dateToString = calendarDate.toString();\n    console.log(\"date clicked\");\n    navigate(`/datepage/${dateToString}`);\n    console.log(dateToString);\n  }\n\n  function onActiveStartDateChange(action) {\n    let startDate = new Date(action.activeStartDate.getTime() - action.activeStartDate.getTimezoneOffset() * 60000);\n    let formattedStartDate = startDate.toISOString().split('T')[0];\n    let lastDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);\n    let formattedLastDate = new Date(lastDate.getTime() - lastDate.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n    console.log(formattedStartDate, formattedLastDate);\n    setApod(undefined);\n    setDate(formattedStartDate);\n  }\n\n  function decideImage(_ref) {\n    let {\n      date\n    } = _ref;\n    console.log(apod);\n\n    if (date <= new Date()) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: apod ? /*#__PURE__*/_jsxDEV(CalendarImages, { ...apod[date.getDate() - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn.dribbble.com/users/8106/screenshots/1297289/media/1437d8444edeac257a088ee6d8a0837a.gif\",\n          alt: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 70\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title bold has-text-centered\",\n      children: \"Welcome to our Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar // FUNCTIONS\n    , {\n      onChange: onChange,\n      onClickDay: onClickDay,\n      value: value,\n      onActiveStartDateChange: onActiveStartDateChange // SETTINGS\n      ,\n      minDetail: \"month\" // this means users can only see a month view (change to year to have year and month options)\n      ,\n      maxDate: new Date() // this stops users selecting future dates\n      // tileContent={({ date, view }) => view === \"month\" && date.getDate() === 1 ? <img src={apod ? apod[0].url : \"https://miro.medium.com/max/880/0*H3jZONKqRuAAeHnG.jpg\"} /> : null}\n      ,\n      tileContent: decideImage // tileContent={tileContentGenerator}\n      ,\n      selectRange: true // this allows users to select a range of dates - we will use this to show the pictures from all of these dates\n      ,\n      defaultView: \"month\",\n      showNeighboringMonth: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"has-text-centered\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        width: \"500\",\n        height: \"300\",\n        src: \"https://media4.giphy.com/media/l0Iych4GHWMRxci2I/giphy.gif?cid=790b761194122cfca4d97229dc5a95369c32bf677d08d9ad&rid=giphy.gif&ct=g\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CalendarPage, \"1rEHo87NGMLmBZxUCx24KSgjX0k=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CalendarPage;\nexport default CalendarPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarPage\");","map":{"version":3,"sources":["/Users/labri/Desktop/coding/project-2/project-2-starter/src/components/pictureOfTheDay/CalendarPage.js"],"names":["Calendar","React","useNavigate","CalendarImages","CalendarPage","navigate","value","setValue","useState","Date","apod","setApod","undefined","date","firstDateOfCurrentMonth","getFullYear","getMonth","summerTimeAdjustedFirstDate","getTime","getTimezoneOffset","toISOString","split","formattedToday","formattedDate","setDate","useEffect","fetchApod","resp","fetch","data","json","onChange","nextValue","onClickDay","calendarDate","dateToString","toString","console","log","onActiveStartDateChange","action","startDate","activeStartDate","formattedStartDate","lastDate","formattedLastDate","decideImage","getDate"],"mappings":"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","sourcesContent":["// import React from \"react\"\nimport Calendar from \"react-calendar\";\nimport React from \"react\"\nimport { useNavigate } from \"react-router-dom\";\nimport CalendarImages from \"./CalendarImages\"\n// import 'react-calendar/dist/Calendar.css'\n\nfunction CalendarPage() {\n  const navigate = useNavigate()\n  const [value, setValue] = React.useState(new Date());\n  const [apod, setApod] = React.useState(undefined);\n  let date = new Date()\n   let firstDateOfCurrentMonth = new Date(date.getFullYear(), date.getMonth(), 1)\n  let summerTimeAdjustedFirstDate = new Date(\n    firstDateOfCurrentMonth\n      .getTime() - firstDateOfCurrentMonth.getTimezoneOffset() * 60000\n  ).toISOString().split(\"T\")[0]\n  let formattedToday = new Date(\n    date\n      .getTime() - date.getTimezoneOffset() * 60000\n  ).toISOString().split(\"T\")[0]\n  const [formattedDate, setDate] = React.useState(summerTimeAdjustedFirstDate);\n\n  React.useEffect(() => {\n    async function fetchApod() {\n      const resp = await fetch(`https://api.nasa.gov/planetary/apod?start_date=${formattedDate}&thumbs=true&api_key=ZNZOJj0Nq1kjV9IBBHp5qNWaAfThwOh4Kn98vhuY`);\n      const data = await resp.json();\n      setApod(data);\n    }\n     fetchApod();\n  }, [formattedDate]);\n\n  function onChange(nextValue) {\n    setValue(nextValue);\n    // this is allowing to navigate the calendar by clicking eg. a day from a different month\n  }\n\n  function onClickDay(value) {\n    // point to the DatePage component\n    const calendarDate = new Date(\n      value.getTime() -\n      value.getTimezoneOffset() * 60000\n    ).toISOString().split('T')[0]\n    const dateToString = calendarDate.toString()\n    console.log(\"date clicked\")\n    navigate(`/datepage/${dateToString}`)\n    console.log(dateToString)\n\n  }\n\n  function onActiveStartDateChange(action) {\n    let startDate = new Date(\n  action.activeStartDate.getTime() -\n    action.activeStartDate.getTimezoneOffset() * 60000\n)\n    let formattedStartDate = startDate.toISOString().split('T')[0]\n    let lastDate = new Date(startDate.getFullYear()\n, startDate.getMonth()\n + 1, 0)\n    let formattedLastDate = new Date(\n  lastDate.getTime() - lastDate.getTimezoneOffset() * 60000\n).toISOString().split(\"T\")[0]\n    console.log(formattedStartDate, formattedLastDate);\n    setApod(undefined);\n    setDate(formattedStartDate)\n  } \n\n  function decideImage({ date }) {\n    console.log(apod)\n    if (date <= new Date()) {\n      return (\n        <>\n          {apod ? <CalendarImages {...apod[date.getDate() - 1]} /> : <img src=\"https://cdn.dribbble.com/users/8106/screenshots/1297289/media/1437d8444edeac257a088ee6d8a0837a.gif\" alt=\"loading\"/> }\n        </>\n      )\n    }\n  }\n\n  return (\n    <>\n      <h1 className=\"title bold has-text-centered\">Welcome to our Calendar</h1>\n      <Calendar\n        // FUNCTIONS\n        onChange={onChange}\n        onClickDay={onClickDay}\n        value={value}\n        onActiveStartDateChange={onActiveStartDateChange}\n\n        // SETTINGS\n        minDetail=\"month\" // this means users can only see a month view (change to year to have year and month options)\n        maxDate={new Date()} // this stops users selecting future dates\n\n        // tileContent={({ date, view }) => view === \"month\" && date.getDate() === 1 ? <img src={apod ? apod[0].url : \"https://miro.medium.com/max/880/0*H3jZONKqRuAAeHnG.jpg\"} /> : null}\n        tileContent={decideImage}\n        // tileContent={tileContentGenerator}\n        \n        selectRange={true} // this allows users to select a range of dates - we will use this to show the pictures from all of these dates\n        defaultView=\"month\"\n        showNeighboringMonth={false}\n      />\n      <div className=\"has-text-centered\">\n        <img width=\"500\"\n          height=\"300\" src=\"https://media4.giphy.com/media/l0Iych4GHWMRxci2I/giphy.gif?cid=790b761194122cfca4d97229dc5a95369c32bf677d08d9ad&rid=giphy.gif&ct=g\" />\n      </div>\n      \n    </>\n  );\n}\n\n\nexport default CalendarPage"]},"metadata":{},"sourceType":"module"}